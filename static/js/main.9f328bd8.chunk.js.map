{"version":3,"sources":["common/index.js","components/NavBar/cat.png","components/NavBar/index.jsx","components/GameData/index.jsx","components/GifContainer/index.jsx","components/PopUp/index.jsx","LoadingGif.webp","EndGame.mp3","RightAnswer.mp3","WrongAnswer.mp3","App.js","index.js"],"names":["CardItem","key","title","this","CARD_DECK","levelToCardNum","level","MAX_SCORE","cardDeck","levelToNum","sum","i","length","getMaxScore","pickCards","cardNum","slice","sort","Math","random","RESPONSIVE_THRESHOLD","NavBar","howPopupShow","className","src","Cat","alt","onClick","GameData","currentScore","bestScore","GifContainer","source","checkAnswer","useEffect","cardWrapper","document","getElementById","playGif","querySelector","process","classList","add","stopPlayGif","remove","window","innerWidth","addEventListener","removeEventListener","id","PopUp","popupShow","popupMessage","closePopup","scoreAtLoss","popBackgClass","desktopWindow","popupTitle","popupContent","popupButtonText","floor","App","useState","setCurrentScore","setBestScore","setLevel","cardsVisible","setCardsVisible","levelLoadingVisible","setLevelLoadingVisible","popupVisible","setPopupVisible","setPopupMessage","currentCards","setCurrentCards","selectedCards","setSelectedCards","gameStart","setGameStart","setScoreAtLoss","event","cardId","target","closest","includes","playSound","WrongAnswerSound","EndGameSound","RightAnswerSound","score","scoreAtLevel","scoreToLevel","previousValue","setTimeout","previousArray","concat","previousCards","previousScore","Audio","play","map","cardItem","LoadingGif","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9f328bd8.chunk.js","sourcesContent":["function CardItem(key, title) {\n  this.key = key;\n  this.title = title;\n}\n\nconst CARD_DECK = [\n  new CardItem(\"awkward\", \"Awkward Erm\"),\n  new CardItem(\"bored\", \"Bored Cat\"),\n  new CardItem(\"ohgod\", \"Oh God Reaction\"),\n  new CardItem(\"doggystyle\", \"Doggy Style Fail\"),\n  new CardItem(\"rwow\", \"R & R Wow\"),\n  new CardItem(\"failhome\", \"Fail Home Video\"),\n  new CardItem(\"letmein\", \"Let Me In\"),\n  new CardItem(\"icehockey\", \"Ouch Ice Hockey\"),\n  new CardItem(\"bros\", \"Best Bros Friendship\"),\n  new CardItem(\"weekend\", \"Mood Monday\"),\n  new CardItem(\"office\", \"The Office Get Out\"),\n];\n\n//converts a level value to the number of cards used in that level\nconst levelToCardNum = (level) => {\n  return level * 2 + 1;\n};\n\n/*converts a score to a level number, need to input the function that is used to \ncalculate the # of cards in the level*/\nconst scoreToLevel = (score, levelToNum) => {\n  let level = 0;\n  let scoreAtLevel = 0;\n  while (scoreAtLevel <= score) {\n    level++;\n    scoreAtLevel += levelToNum(level);\n  }\n  return level;\n};\n\n//calculates the max score possible given a card deck and the function used to calculate # of cards in the level\nconst getMaxScore = (cardDeck, levelToNum) => {\n  let sum = 0;\n  for (let i = 1; levelToNum(i) <= cardDeck.length; i++) {\n    sum += levelToNum(i);\n  }\n\n  return sum;\n};\n\nconst MAX_SCORE = getMaxScore(CARD_DECK, levelToCardNum);\n\n//randomly pickes cardNum number of cards from the cardDeck\nconst pickCards = (cardNum, cardDeck) => {\n  return cardDeck\n    .slice()\n    .sort(() => 0.5 - Math.random())\n    .slice(0, cardNum);\n};\n\n//reshuffles cards\nconst shuffleCards = (cards) => {\n  return cards.sort(() => 0.5 - Math.random());\n};\n\nconst LEVEL_LOAD_TIME = 3000;\n\nconst RESPONSIVE_THRESHOLD = 1366;\n\nexport {\n  CARD_DECK,\n  levelToCardNum,\n  pickCards,\n  shuffleCards,\n  MAX_SCORE,\n  scoreToLevel,\n  LEVEL_LOAD_TIME,\n  RESPONSIVE_THRESHOLD,\n};\n","export default __webpack_public_path__ + \"static/media/cat.f1560a6c.png\";","import \"./NavBar.scss\";\nimport Cat from \"./cat.png\";\n\nconst NavBar = ({ howPopupShow }) => {\n  return (\n    <header className=\"font-size-regular\">\n      <nav>\n        <div className=\"left-nav-wrapper\">\n          <img src={Cat} alt=\"Cat\" />\n          <span>What GIFs</span>\n        </div>\n        <div className=\"right-nav-wrapper\" onClick={howPopupShow}>\n          How it works\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./GameData.scss\";\n\nconst GameData = ({ level, currentScore, bestScore }) => {\n  return (\n    <div className=\"game-data-wrapper font-size-regular\">\n      <div className=\"level\">Level: {level}</div>\n      <div className=\"score-wrapper\">\n        <span className=\"current-score\">Current score: {currentScore}</span>\n        <span className=\"best-score\">Best score: {bestScore}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default GameData;\n","import React, { useEffect } from \"react\";\n\nimport \"./GifContainer.scss\";\n\nimport { RESPONSIVE_THRESHOLD } from \"../../common/index.js\";\n\nconst GifContainer = ({ source, title, checkAnswer }) => {\n  useEffect(() => {\n    const cardWrapper = document.getElementById(source);\n\n    const playGif = () => {\n      //the GIFs are placed in the public folder because they're dynamically loaded one by one, not all at once\n      cardWrapper.querySelector(\n        \"img\"\n      ).src = `${process.env.PUBLIC_URL}/gifs/original/${source}.gif`;\n      cardWrapper.classList.add(\"yellow-font\");\n    };\n\n    const stopPlayGif = () => {\n      cardWrapper.querySelector(\n        \"img\"\n      ).src = `${process.env.PUBLIC_URL}/gifs/images/${source}.jpg`;\n      cardWrapper.classList.remove(\"yellow-font\");\n    };\n\n    //if desktop, only play GIF on hover, otherwise always play it\n    if (window.innerWidth > RESPONSIVE_THRESHOLD) {\n      cardWrapper.addEventListener(\"mouseenter\", playGif);\n      cardWrapper.addEventListener(\"mouseleave\", stopPlayGif);\n    } else {\n      playGif();\n    }\n\n    return () => {\n      if (window.innerWidth > RESPONSIVE_THRESHOLD) {\n        cardWrapper.removeEventListener(\"mouseenter\", playGif);\n        cardWrapper.removeEventListener(\"mouseleave\", stopPlayGif);\n      }\n    };\n  }, [source]);\n\n  return (\n    <div className=\"card-wrapper\" id={source} onClick={checkAnswer}>\n      <img\n        src={`${process.env.PUBLIC_URL}/gifs/images/${source}.jpg`}\n        alt={title}\n      />\n      <div className=\"title font-size-regular\">{title}</div>\n    </div>\n  );\n};\n\nexport default GifContainer;\n","import \"./PopUp.scss\";\n\nimport { MAX_SCORE, RESPONSIVE_THRESHOLD } from \"../../common/index.js\";\n\nconst PopUp = ({ popupShow, popupMessage, closePopup, scoreAtLoss }) => {\n  let popBackgClass = \"popup-background\";\n\n  //the show class sets the visibility of the popup\n  if (popupShow) {\n    popBackgClass += \" show\";\n  }\n  let desktopWindow = window.innerWidth > RESPONSIVE_THRESHOLD;\n\n  let [popupTitle, popupContent, popupButtonText] = [\"\", \"\", \"\"];\n\n  switch (popupMessage) {\n    case \"how\":\n      popupTitle = \"How it works\";\n      popupContent = (\n        <div className=\"popup-content font-size-regular\">\n          <p>\n            Welcome to the <span className=\"frostbite-color\">What GIFs</span>{\" \"}\n            memory game. The aim of the game is to make sure you don't\n            {desktopWindow ? \" click\" : \" tap\"} the same GIF in a given level.\n          </p>\n          <p>\n            {desktopWindow &&\n              \"You can play the GIF by hovering your cursor over it. \"}\n            The maximum score you can get is{\" \"}\n            <span className=\"frostbite-color\">{MAX_SCORE}</span>.{\" \"}\n            <span className=\"yellow-color\">\n              And turn on the volume, you won't regret it.\n            </span>\n          </p>\n          <p>\n            Excited? You should be. It's an amazing game, very well-rated by\n            IGN. Made by a budding rock superstar developer. A once in a\n            lifetime opportunity.\n          </p>\n        </div>\n      );\n      popupButtonText = \"Shut up and just start the damn game!\";\n      break;\n    case \"max\":\n      popupTitle = \"You beat the game!\";\n      popupContent = (\n        <div className=\"popup-content font-size-regular\">\n          <p>Congratulations, you reached the maximum score!</p>\n          <p>\n            You were expecting more, weren't you? A reward maybe? I don't have\n            anything, just be proud of the bragging rights you get. People are\n            gonna fall over you once you tell them about this achievement.\n          </p>\n          <p>...why are you still reading? Bugger off.</p>\n        </div>\n      );\n      popupButtonText =\n        \"This is so addictive, I want to play again from the start!\";\n      break;\n    default:\n      popupTitle = \"You lost T_T\";\n      popupContent = (\n        <div className=\"popup-content font-size-regular\">\n          <p>Damn, you lost...what a shame (yawn).</p>\n          {scoreAtLoss < MAX_SCORE / 3 ? (\n            <p>\n              And you only managed to get a score of{\" \"}\n              <span className=\"frostbite-color\">{scoreAtLoss}</span>?? I'm sorry\n              to say this, but...it's pathetic. My cat can do better when he\n              walks over my laptop.\n            </p>\n          ) : scoreAtLoss < (MAX_SCORE * 2) / 3 ? (\n            <p>\n              Well, at least you managed to get a score of{\" \"}\n              <span className=\"frostbite-color\">{scoreAtLoss}</span>. It's not\n              too bad, a little better than my cat's personal best (\n              {Math.floor(MAX_SCORE / 3)}). I know it doesn't say much, but you\n              could've done better.\n            </p>\n          ) : (\n            <p>\n              You were so close too, with a score of{\" \"}\n              <span className=\"frostbite-color\">{scoreAtLoss}</span> (remember,\n              the max score is {MAX_SCORE}). But that doesn't matter now, all is\n              lost and you have to start again. I almost feel sorry for you.\n            </p>\n          )}\n          <p>Better luck next time I guess.</p>\n        </div>\n      );\n      popupButtonText = \"Let me give it another shot!\";\n  }\n\n  return (\n    <div className={popBackgClass}>\n      <div className=\"popup-wrapper\">\n        <div className=\"popup-title font-size-large\">{popupTitle}</div>\n        {popupContent}\n        <button className=\"font-size-regular\" onClick={closePopup}>\n          {popupButtonText}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PopUp;\n","export default __webpack_public_path__ + \"static/media/LoadingGif.a5e842b6.webp\";","export default __webpack_public_path__ + \"static/media/EndGame.23748a52.mp3\";","export default __webpack_public_path__ + \"static/media/RightAnswer.78b60bdb.mp3\";","export default __webpack_public_path__ + \"static/media/WrongAnswer.f1da6b43.mp3\";","import \"./App.scss\";\nimport React, { useState } from \"react\";\n\nimport {\n  CARD_DECK,\n  levelToCardNum,\n  pickCards,\n  shuffleCards,\n  MAX_SCORE,\n  scoreToLevel,\n  LEVEL_LOAD_TIME,\n} from \"./common/index.js\";\n\nimport NavBar from \"./components/NavBar\";\nimport GameData from \"./components/GameData\";\nimport GifContainer from \"./components/GifContainer\";\nimport PopUp from \"./components/PopUp\";\n\nimport LoadingGif from \"./LoadingGif.webp\";\n\nimport EndGameSound from \"./EndGame.mp3\";\nimport RightAnswerSound from \"./RightAnswer.mp3\";\nimport WrongAnswerSound from \"./WrongAnswer.mp3\";\n\nconst App = () => {\n  //current score, best score & level\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [level, setLevel] = useState(1);\n\n  //used to trigger what elements to show\n  const [cardsVisible, setCardsVisible] = useState(false);\n  const [levelLoadingVisible, setLevelLoadingVisible] = useState(false);\n  const [popupVisible, setPopupVisible] = useState(true);\n\n  //message that will be used in the popup\n  //starts with \"how\" value because the game will start with the \"how this works\" popup\n  const [popupMessage, setPopupMessage] = useState(\"how\");\n\n  //current cards **and the order they are in**. latter is important because you can shuffle these cards\n  const [currentCards, setCurrentCards] = useState(\n    pickCards(levelToCardNum(level), CARD_DECK)\n  );\n  //cards that were already selected in the level\n  const [selectedCards, setSelectedCards] = useState([]);\n\n  //indicates whether at start of game\n  const [gameStart, setGameStart] = useState(true);\n\n  //holds the score when the popup for incorrect answer comes up (currentScore goes to 0 in the meantime)\n  const [scoreAtLoss, setScoreAtLoss] = useState(0);\n\n  //trigger for button close in popup modal\n  const closePopup = () => {\n    setPopupVisible(false);\n\n    //if at the start of the game, show the loading image for level 1 with a LEVEL_LOAD_TIME duration instead of showing the cards\n    if (gameStart) {\n      setLevelLoadingVisible(true);\n\n      setTimeout(() => {\n        setLevelLoadingVisible(false);\n        setCardsVisible(true);\n        setGameStart(false);\n        setCurrentCards(pickCards(levelToCardNum(1), CARD_DECK));\n      }, LEVEL_LOAD_TIME);\n    } else {\n      setCardsVisible(true);\n    }\n  };\n\n  //trigger for popup to show with the \"how this works message\"\n  const howPopupShow = () => {\n    setPopupMessage(\"how\");\n    setCardsVisible(false);\n    setPopupVisible(true);\n  };\n\n  //checks whether we've clicked on a valid card\n  const checkAnswer = (event) => {\n    let cardId = event.target.closest(\".card-wrapper\").id;\n    setCardsVisible(false);\n\n    /* 3 scenarios...1)incorrect card picked...\n     */\n    if (selectedCards.includes(cardId)) {\n      playSound(WrongAnswerSound);\n      setPopupMessage(\"loss\");\n      setScoreAtLoss(currentScore);\n      setPopupVisible(true);\n\n      if (currentScore > bestScore) {\n        setBestScore(currentScore);\n      }\n\n      setCurrentScore(0);\n      setSelectedCards([]);\n      setLevel(1);\n      setGameStart(true);\n      //...2) correct card picked and max score reached...\n    } else if (currentScore === MAX_SCORE - 1) {\n      playSound(EndGameSound);\n      setPopupMessage(\"max\");\n      setPopupVisible(true);\n\n      setBestScore(MAX_SCORE);\n\n      setCurrentScore(0);\n      setSelectedCards([]);\n      setLevel(1);\n      setGameStart(true);\n      //...3) correct card picked and max score not reached\n    } else {\n      playSound(RightAnswerSound);\n      if (scoreToLevel(currentScore + 1, levelToCardNum) > level) {\n        setLevel((previousValue) => previousValue + 1);\n        setSelectedCards([]);\n        setLevelLoadingVisible(true);\n\n        //show the level loading screen\n        setTimeout(() => {\n          setLevelLoadingVisible(false);\n          setCurrentCards(pickCards(levelToCardNum(level + 1), CARD_DECK));\n          setCardsVisible(true);\n        }, LEVEL_LOAD_TIME);\n        //\n      } else {\n        setSelectedCards((previousArray) => previousArray.concat(cardId));\n        setCurrentCards((previousCards) => shuffleCards(previousCards));\n        setTimeout(() => setCardsVisible(true), 200);\n      }\n      //\n      setCurrentScore((previousScore) => previousScore + 1);\n    }\n  };\n\n  const playSound = (src) => {\n    let audio = new Audio(src);\n    audio.play();\n  };\n\n  return (\n    <div>\n      <PopUp\n        popupShow={popupVisible}\n        popupMessage={popupMessage}\n        closePopup={closePopup}\n        scoreAtLoss={scoreAtLoss}\n      />\n      <NavBar howPopupShow={howPopupShow} />\n      <GameData\n        level={level}\n        currentScore={currentScore}\n        bestScore={bestScore}\n      />\n      {/*GIFs container section */}\n      {cardsVisible && (\n        <div className=\"gif-cards-container\">\n          {currentCards.map((cardItem) => (\n            <GifContainer\n              key={cardItem.key}\n              source={cardItem.key}\n              title={cardItem.title}\n              checkAnswer={checkAnswer}\n            />\n          ))}\n        </div>\n      )}\n      {/*the level loading screen */}\n      {levelLoadingVisible && (\n        <div className=\"level-load-wrapper\">\n          <h1>Loading level {level}</h1>\n          <img src={LoadingGif} alt=\"Loading GIF\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./common/selectors.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}