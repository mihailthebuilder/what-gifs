{"version":3,"sources":["common/index.js","components/NavBar/cat.png","components/NavBar/index.jsx","components/GameData/index.jsx","components/GifContainer/index.jsx","components/PopUp/index.jsx","App.js","index.js"],"names":["CardItem","key","title","this","CARD_DECK","levelToCardNum","level","scoreToLevel","score","levelToNum","scoreAtLevel","MAX_SCORE","cardDeck","sum","i","length","getMaxScore","pickCards","cardNum","slice","sort","Math","random","ScoreObj","currentScore","bestScore","current","best","NavBar","togglePopup","className","src","Cat","alt","onClick","GameData","GifContainer","source","checkAnswer","useEffect","cardWrapper","document","getElementById","playGif","querySelector","process","classList","add","stopPlayGif","remove","checkElemInView","el","rect","getBoundingClientRect","elemTop","top","elemBottom","bottom","window","innerHeight","isScrolledIntoView","innerWidth","addEventListener","removeEventListener","id","PopUp","popupShow","popupMessage","popBackgClass","desktopWindow","App","useState","setScore","setLevel","maxScoreReached","setMaxScoreReached","currentCards","setCurrentCards","setSelectedCards","selectedCards","event","cardId","target","closest","includes","previousScore","previousArray","concat","previousCards","setPopupShow","previousValue","disabled","join","map","cardItem","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e698815d.chunk.js","sourcesContent":["function CardItem(key, title) {\n  this.key = key;\n  this.title = title;\n}\n\nconst CARD_DECK = [\n  new CardItem(\"awkward\", \"Awkward Erm\"),\n  new CardItem(\"bored\", \"Bored Cat\"),\n  new CardItem(\"ohgod\", \"Oh God Reaction\"),\n  new CardItem(\"doggystyle\", \"Doggy Style Fail\"),\n  new CardItem(\"rwow\", \"R & R Wow\"),\n  new CardItem(\"failhome\", \"Fail Home Video\"),\n  new CardItem(\"letmein\", \"Let Me In\"),\n  new CardItem(\"icehockey\", \"Ouch Ice Hockey\"),\n  new CardItem(\"bros\", \"Best Bros Friendship\"),\n  new CardItem(\"weekend\", \"Mood Monday\"),\n  new CardItem(\"office\", \"The Office Get Out\"),\n];\n\nconst levelToCardNum = (level) => {\n  return level * 2 + 1;\n};\n\nconst scoreToLevel = (score, levelToNum) => {\n  let level = 0;\n  let scoreAtLevel = 0;\n  while (scoreAtLevel <= score) {\n    level++;\n    scoreAtLevel += levelToNum(level);\n  }\n  return level;\n};\n\nconst getMaxScore = (cardDeck, levelToNum) => {\n  let sum = 0;\n  for (let i = 1; levelToNum(i) <= cardDeck.length; i++) {\n    sum += levelToNum(i);\n  }\n\n  return sum;\n};\n\nconst MAX_SCORE = getMaxScore(CARD_DECK, levelToCardNum);\n\nconst pickCards = (cardNum, cardDeck) => {\n  return cardDeck\n    .slice()\n    .sort(() => 0.5 - Math.random())\n    .slice(0, cardNum);\n};\n\nfunction ScoreObj(currentScore, bestScore) {\n  this.current = currentScore;\n  this.best = bestScore;\n}\n\nconst shuffleCards = (cards) => {\n  return cards.sort(() => 0.5 - Math.random());\n};\n\nconst isScrolledIntoView = (el) => {\n  const rect = el.getBoundingClientRect();\n  const elemTop = rect.top;\n  const elemBottom = rect.bottom;\n\n  // Only completely visible elements return true:\n  const isVisible = elemTop >= 0 && elemBottom <= window.innerHeight;\n  // Partially visible elements return true:\n  //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n  return isVisible;\n};\n\nexport {\n  CARD_DECK,\n  levelToCardNum,\n  pickCards,\n  ScoreObj,\n  shuffleCards,\n  MAX_SCORE,\n  scoreToLevel,\n  isScrolledIntoView,\n};\n","export default __webpack_public_path__ + \"static/media/cat.f1560a6c.png\";","import \"./NavBar.scss\";\nimport Cat from \"./cat.png\";\n\nconst NavBar = ({ togglePopup }) => {\n  return (\n    <header className=\"font-size-regular\">\n      <nav>\n        <div className=\"left-nav-wrapper\">\n          <img src={Cat} alt=\"Cat\" />\n          <span>What GIFs</span>\n        </div>\n        <div className=\"right-nav-wrapper\" onClick={togglePopup}>\n          How it works\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./GameData.scss\";\n\nconst GameData = ({ level, score }) => {\n  return (\n    <div className=\"game-data-wrapper font-size-regular\">\n      <div className=\"level\">Level: {level}</div>\n      <div className=\"score-wrapper\">\n        <span className=\"current-score\">Current score: {score.current}</span>\n        <span className=\"best-score\">Best score: {score.best}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default GameData;\n","import React, { useEffect } from \"react\";\n\nimport \"./GifContainer.scss\";\n\nimport { isScrolledIntoView } from \"../../common/index.js\";\n\nconst GifContainer = ({ source, title, checkAnswer }) => {\n  useEffect(() => {\n    const cardWrapper = document.getElementById(source);\n\n    const playGif = () => {\n      cardWrapper.querySelector(\n        \"img\"\n      ).src = `${process.env.PUBLIC_URL}/gifs/original/${source}.gif`;\n      cardWrapper.classList.add(\"yellow-font\");\n    };\n\n    const stopPlayGif = () => {\n      cardWrapper.querySelector(\n        \"img\"\n      ).src = `${process.env.PUBLIC_URL}/gifs/images/${source}.jpg`;\n      cardWrapper.classList.remove(\"yellow-font\");\n    };\n\n    const checkElemInView = () => {\n      if (isScrolledIntoView(cardWrapper)) {\n        playGif();\n      } else {\n        stopPlayGif();\n      }\n    };\n\n    if (window.innerWidth > 768) {\n      cardWrapper.addEventListener(\"mouseenter\", playGif);\n      cardWrapper.addEventListener(\"mouseleave\", stopPlayGif);\n    } else {\n      window.addEventListener(\"scroll\", checkElemInView);\n    }\n\n    return () => {\n      cardWrapper.removeEventListener(\"mouseenter\", playGif);\n      cardWrapper.removeEventListener(\"mouseleave\", stopPlayGif);\n      cardWrapper.removeEventListener(\"scroll\", checkElemInView);\n    };\n  }, [source]);\n\n  return (\n    <div className=\"card-wrapper\" id={source} onClick={checkAnswer}>\n      <img\n        src={`${process.env.PUBLIC_URL}/gifs/images/${source}.jpg`}\n        alt={title}\n      />\n      <div className=\"title font-size-regular\">{title}</div>\n    </div>\n  );\n};\n\nexport default GifContainer;\n","import \"./PopUp.scss\";\n\nimport { MAX_SCORE } from \"../../common/index.js\";\n\nconst PopUp = ({ popupShow, popupMessage, togglePopup }) => {\n  let popBackgClass = \"popup-background\";\n  if (popupShow) {\n    popBackgClass += \" show\";\n  }\n  let desktopWindow = window.innerWidth > 768;\n\n  return (\n    <div className={popBackgClass}>\n      <div className=\"popup-wrapper\">\n        <div className=\"popup-title font-size-large\">How it works</div>\n        <div className=\"popup-content font-size-regular\">\n          <p>\n            Welcome to the <span className=\"frostbite-color\">What GIFs</span>{\" \"}\n            memory game. The aim of the game is to make sure you don't\n            {desktopWindow ? \" click\" : \" tap\"} the same GIF in a given level.\n          </p>\n          <p>\n            You can play the GIF by\n            {desktopWindow ? \" hovering over it\" : \" scrolling it into view\"}.\n            The maximum score you can get is{\" \"}\n            <span className=\"frostbite-color\">{MAX_SCORE}</span>.\n          </p>\n        </div>\n        <button className=\"font-size-regular\" onClick={togglePopup}>\n          Understood, now let me play the damn game!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PopUp;\n","import \"./App.scss\";\nimport React, { useState, useEffect } from \"react\";\n\nimport {\n  CARD_DECK,\n  levelToCardNum,\n  pickCards,\n  ScoreObj,\n  shuffleCards,\n  MAX_SCORE,\n  scoreToLevel,\n} from \"./common/index.js\";\n\nimport NavBar from \"./components/NavBar\";\nimport GameData from \"./components/GameData\";\nimport GifContainer from \"./components/GifContainer\";\nimport PopUp from \"./components/PopUp\";\n\nconst App = () => {\n  const [score, setScore] = useState(new ScoreObj(0, 0));\n  const [level, setLevel] = useState(scoreToLevel(0, levelToCardNum));\n  const [maxScoreReached, setMaxScoreReached] = useState(false);\n\n  useEffect(() => {\n    if (score.current === MAX_SCORE) {\n      setScore(new ScoreObj(0, MAX_SCORE - 1));\n      setLevel(scoreToLevel(0, levelToCardNum));\n      setMaxScoreReached(true);\n    } else setLevel(scoreToLevel(score.current, levelToCardNum));\n  }, [score]);\n\n  const resetMaxScoreReached = (event) => {\n    setMaxScoreReached(false);\n  };\n\n  const [currentCards, setCurrentCards] = useState(\n    pickCards(levelToCardNum(level), CARD_DECK)\n  );\n  useEffect(() => {\n    setCurrentCards(pickCards(levelToCardNum(level), CARD_DECK));\n    setSelectedCards([]);\n  }, [level]);\n\n  const [selectedCards, setSelectedCards] = useState([]);\n\n  const checkAnswer = (event) => {\n    let cardId = event.target.closest(\".card-wrapper\").id;\n\n    if (selectedCards.includes(cardId)) {\n      setScore((previousScore) => {\n        let newBestScore =\n          previousScore.current > previousScore.best\n            ? previousScore.current\n            : previousScore.best;\n        return new ScoreObj(0, newBestScore);\n      });\n      setSelectedCards([]);\n    } else {\n      setScore(\n        (previousScore) =>\n          new ScoreObj(previousScore.current + 1, previousScore.best)\n      );\n      setSelectedCards((previousArray) => previousArray.concat(cardId));\n    }\n    setCurrentCards((previousCards) => shuffleCards(previousCards));\n  };\n\n  const [popupShow, setPopupShow] = useState(true);\n  const [popupMessage, setPopupMessage] = useState(\"how\");\n\n  const togglePopup = () => setPopupShow((previousValue) => !previousValue);\n\n  return (\n    <div>\n      <PopUp\n        popupShow={popupShow}\n        popupMessage={popupMessage}\n        togglePopup={togglePopup}\n      />\n      <NavBar togglePopup={togglePopup} />\n      <GameData level={level} score={score} />\n      <button\n        className=\"regular-font-size\"\n        onClick={resetMaxScoreReached}\n        disabled={!maxScoreReached}\n      >\n        Reset maxScoreReached\n      </button>\n      <div>Max score: {MAX_SCORE}</div>\n      <div>Max score reached? {maxScoreReached ? \"yes\" : \"no\"} </div>\n      <div className=\"instructions\">\n        {window.innerWidth > 768\n          ? \"Hover to play the GIF\"\n          : \"Start scrolling to play the GIFs\"}\n      </div>\n      <div>Selected cards: {selectedCards.join(\", \")}</div>\n      <div className=\"gif-cards-container\">\n        {currentCards.map((cardItem) => (\n          <GifContainer\n            key={cardItem.key}\n            source={cardItem.key}\n            title={cardItem.title}\n            checkAnswer={checkAnswer}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./common/selectors.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}